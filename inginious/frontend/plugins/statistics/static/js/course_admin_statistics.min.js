const CsvConverter=function(){function t(t){this.data=t}return t.prototype.downloadCsv=function(){const t="data:text/csv;charset=utf-8,"+Papa.unparse(this.data),e=encodeURI(t),s=document.createElement("a");s.setAttribute("href",e),s.setAttribute("download","export.csv"),document.body.appendChild(s),s.click(),s.remove()},t}(),Statistic=function(){function t(){this._cachedPromise=null}return t.prototype._fetchAndCacheData=function(){return null==this._cachedPromise&&(this._cachedPromise=this._fetchData()),this._cachedPromise},t.prototype.plotAsync=function(){const t=this;this._fetchAndCacheData().then(function(e){t._plotData(e)})},t.prototype._fetchCsvData=function(){return this._fetchAndCacheData()},t.prototype.downloadCsvAsync=function(){this._fetchCsvData().then(function(t){new CsvConverter(t).downloadCsv()})},t.prototype._plotData=function(t){throw"Not implemented"},t.prototype._fetchData=function(){throw"Not implemented"},t}();function createSubmissionLink(t){return _.template("/submission/${ submissionId }")({submissionId:t})}function generateVerdictSubmissionTable(t,e){const s=$("#"+t);s.html("<thead><tr><th>Username</th><th>Grade</th><th>Status</th><th>Summary result</th><th>Submitted on</th><th>Submission</th></tr></thead>");const i=$("<tbody/>");for(let t=0;t<e.length;++t){const s=$("<tr/>"),n=e[t],a=[n.username,n.grade,n.status||"-",n.summary_result||"-",n.submitted_on||"-"];for(let t=0;t<a.length;++t){const e=$("<td/>");e.text(a[t]),s.append(e)}const o=$("<td/>");if(n.id){const t=$("<a>",{text:n.id,href:createSubmissionLink(n.id)});o.append(t)}else o.text("No submission available");s.append(o),i.append(s)}s.append(i)}function generateSubmissionTable(t,e){const s=$("#"+t);s.html("<thead><tr><th>Username</th><th>Grade</th><th>Status</th><th>Summary result</th><th>Submitted on</th><th>Submission</th></tr></thead>");const i=$("<tbody/>");for(let t=0;t<e.length;++t){const s=$("<tr/>"),n=e[t],a=n.submission||{},o=[n.username,n.grade,a.status||"-",a.summary_result||"-",a.submitted_on||"-"];for(let t=0;t<o.length;++t){const e=$("<td/>");e.text(o[t]),s.append(e)}const r=$("<td/>");if(a.id){const t=$("<a>",{text:a.id,href:createSubmissionLink(a.id)});r.append(t)}else r.text("No submission available");s.append(r),i.append(s)}s.append(i)}function createAlertHtml(t,e){return'<div class="alert '+t+' alert-dismissible" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+e+"</div>"}const COLOR_COMPILATION_ERROR="rgb(236,199,6)",COLOR_TIME_LIMIT_EXCEEDED="rgb(50,120,202)",COLOR_MEMORY_LIMIT_EXCEEDED="rgb(119,92,133)",COLOR_RUNTIME_ERROR="rgb(2,164,174)",COLOR_WRONG_ANSWER="rgb(227,79,54)",COLOR_OUTPUT_LIMIT_EXCEEDED="rgb(137,139,37)",COLOR_GRADING_RUNTIME_ERROR="rgb(139,62,0)",COLOR_ACCEPTED="rgb(35,181,100)",COLOR_LABEL="rgb(107, 107, 107)",errorContainer=$("#plotErrorContainer");function getDataNormalized(t,e){return t.count/e[t.task_id]*100}function getData(t,e){return t.count}function createObjectToPlotData(t,e,s,i,n,a){const o={x:[],y:[],marker:{color:n},name:i,type:"bar"};for(let n=0;n<t.length;++n)t[n].summary_result===i&&(o.x.push(s[t[n].task_id]),o.y.push(a(t[n],e)));return o}function plotVerdictStatisticsChart(t,e,s,i,n,a=!1,o){const r={},c={},u={},l=i?"Percentage of submissions":"Number of submissions";let d=0;for(let t=0;t<e.length;t++)null==r[e[t].task_id]&&(r[e[t].task_id]=0,u[d]=e[t].task_name,c[e[t].task_id]=d++),r[e[t].task_id]+=e[t].count;const _=i?getDataNormalized:getData,m=createObjectToPlotData(e,r,c,"COMPILATION_ERROR",COLOR_COMPILATION_ERROR,_),p=createObjectToPlotData(e,r,c,"TIME_LIMIT_EXCEEDED",COLOR_TIME_LIMIT_EXCEEDED,_),b=createObjectToPlotData(e,r,c,"MEMORY_LIMIT_EXCEEDED",COLOR_MEMORY_LIMIT_EXCEEDED,_),h=createObjectToPlotData(e,r,c,"RUNTIME_ERROR",COLOR_RUNTIME_ERROR,_),g=createObjectToPlotData(e,r,c,"WRONG_ANSWER",COLOR_WRONG_ANSWER,_),f=createObjectToPlotData(e,r,c,"OUTPUT_LIMIT_EXCEEDED",COLOR_OUTPUT_LIMIT_EXCEEDED,_),y=createObjectToPlotData(e,r,c,"GRADING_RUNTIME_ERROR",COLOR_GRADING_RUNTIME_ERROR,_),O=[m,p,b,h,g,f,createObjectToPlotData(e,r,c,"ACCEPTED",COLOR_ACCEPTED,_),y],S={barmode:"stack",title:s,hovermode:"closest",xaxis:{title:"Tasks",tickmode:"array",tickvals:Object.values(c),ticktext:Object.values(u),titlefont:{size:16,color:COLOR_LABEL}},yaxis:{title:l,titlefont:{size:16,color:COLOR_LABEL}}};Plotly.purge(t),Plotly.newPlot(t,O,S);const D=$("#"+t);D.unbind("plotly_click"),D[0].on("plotly_click",function(t){const e=t.points[0],s=e.pointNumber,i=Object.keys(c)[e.data.x[s]],r=e.data.name;$.get(n,{course_id:adminStatistics.courseId,task_id:i,summary_result:r,late_submissions:a},o,"json").fail(function(){errorContainer.html(createAlertHtml("alert-danger","Something went wrong while fetching the submission list. Try again later."))})})}const GradeDistributionStatistic=function(){function t(t){Statistic.call(this),this.containerId=t}return t.prototype=Object.create(Statistic.prototype),t.prototype._plotData=function(t){const e=_.map(t,function(t){return{y:t.grades,taskId:t.task_id,name:t.task_name,boxmean:!0,type:"box",marker:{outliercolor:"rgba(219, 64, 82, 0.6)",line:{outliercolor:"rgba(219, 64, 82, 1.0)",outlierwidth:2}},boxpoints:"all"}});Plotly.newPlot(this.containerId,e,{xaxis:{title:"Task name",type:"category"},yaxis:{title:"Grade",type:"linear",range:[-10,110],zeroline:!1}});const s=$("#"+this.containerId);s.unbind("plotly_click"),s[0].on("plotly_click",function(t){const e=t.points[0].data.taskId;errorContainer.empty(),$.get("/api/stats/admin/grade_distribution_details",{course_id:adminStatistics.courseId,task_id:e},function(t){generateSubmissionTable("statisticsGradeDistributionTable",t)},"json").fail(function(){errorContainer.html(createAlertHtml("alert-danger","Something went wrong while fetching the submission list. Try again later."))})})},t.prototype._fetchData=function(){return $.get("/api/stats/admin/grade_distribution",{course_id:adminStatistics.courseId},null,"json")},t}();GradeDistributionStatistic.prototype._fetchData=function(){return $.get("/api/stats/admin/grade_distribution",{course_id:adminStatistics.courseId},null,"json")},GradeDistributionStatistic.prototype._fetchCsvData=function(){return this._fetchAndCacheData().then(function(t){return _.flatMap(t,function(t){return _.map(t.grades,function(e){return{task_id:t.task_id,task_name:t.task_name,grade:e}})})})};const SubmissionsVerdictStatistic=function(){function t(t){Statistic.call(this),this.toggle_normalize_submissions_per_tasks=!1,this.containerId=t}return t.prototype=Object.create(Statistic.prototype),t.prototype._plotData=function(t){const e=generateVerdictSubmissionTable;plotVerdictStatisticsChart(this.containerId,t,"Submissions Vs Verdicts",this.toggle_normalize_submissions_per_tasks,"/api/stats/admin/submissions_verdict_details",!1,function(t){e("submissionsVerdictTable",t)})},t.prototype._fetchData=function(){return $.get("/api/stats/admin/submissions_verdict",{course_id:adminStatistics.courseId,late_submissions:!1},null,"json")},t.prototype.toggleNormalize=function(){this.toggle_normalize_submissions_per_tasks=!this.toggle_normalize_submissions_per_tasks,this.plotAsync()},t}(),LateSubmissionsVerdictStatistic=function(){function t(t){Statistic.call(this),this.toggle_normalize_submissions_per_tasks=!1,this.containerId=t}return t.prototype=Object.create(Statistic.prototype),t.prototype._plotData=function(t){const e=generateVerdictSubmissionTable;plotVerdictStatisticsChart(this.containerId,t,"Submissions Vs Verdicts (LATE)",this.toggle_normalize_submissions_per_tasks,"/api/stats/admin/submissions_verdict_details",!0,function(t){e("lateSubmissionsVerdictTable",t)})},t.prototype._fetchData=function(){return $.get("/api/stats/admin/submissions_verdict",{course_id:adminStatistics.courseId,late_submissions:!0},null,"json")},t.prototype.toggleNormalize=function(){this.toggle_normalize_submissions_per_tasks=!this.toggle_normalize_submissions_per_tasks,this.plotAsync()},t}(),BestSubmissionsVerdictStatistic=function(){function t(t){Statistic.call(this),this.toggle_normalize_best_submissions_per_tasks=!1,this.containerId=t}return t.prototype=Object.create(Statistic.prototype),t.prototype._plotData=function(t){const e=generateSubmissionTable;plotVerdictStatisticsChart(this.containerId,t,"Submissions Vs Verdicts (BEST)",this.toggle_normalize_best_submissions_per_tasks,"/api/stats/admin/best_submissions_verdict_details",!1,function(t){e("bestSubmissionsVerdictTable",t)})},t.prototype._fetchData=function(){return $.get("/api/stats/admin/best_submissions_verdict",{course_id:adminStatistics.courseId},null,"json")},t.prototype.toggleNormalize=function(){this.toggle_normalize_best_submissions_per_tasks=!this.toggle_normalize_best_submissions_per_tasks,this.plotAsync()},t}(),GradeCountStatistic=function(){function t(t){Statistic.call(this),this.containerId=t}return t.prototype=Object.create(Statistic.prototype),t.prototype._plotData=function(t){const e=_.flatMap(t,function(t){return t.grades}),s={mode:"markers",x:[],y:[],taskIds:[],text:[],marker:{sizemode:"area",size:[],sizeref:.001*_.meanBy(e,function(t){return t.count})}};for(let e=0;e<t.length;++e){const i=t[e].grades;for(let n=0;n<i.length;++n)s.x.push(t[e].task_name),s.y.push(i[n].grade),s.taskIds.push(t[e].task_id),s.text.push("Students: "+i[n].count),s.marker.size.push(i[n].count)}Plotly.newPlot(this.containerId,[s],{xaxis:{title:"Task name",type:"category"},yaxis:{title:"Grade",type:"linear",range:[-10,110]},hovermode:"closest"});const i=$("#"+this.containerId);i.unbind("plotly_click"),i[0].on("plotly_click",function(t){const e=t.points[0],s=e.pointNumber,i=e.data.taskIds[s],n=e.y;errorContainer.empty(),$.get("/api/stats/admin/grade_count_details",{course_id:adminStatistics.courseId,task_id:i,grade:n},function(t){generateSubmissionTable("statisticsGradeTable",t)},"json").fail(function(){errorContainer.html(createAlertHtml("alert-danger","Something went wrong while fetching the submission list. Try again later."))})})},t.prototype._fetchData=function(){return $.get("/api/stats/admin/grade_count",{course_id:adminStatistics.courseId},null,"json")},t.prototype._fetchCsvData=function(){return this._fetchAndCacheData().then(function(t){return _.flatMap(t,function(t){return _.map(t.grades,function(e){return{task_id:t.task_id,task_name:t.task_name,grade:e.grade,count:e.count}})})})},t}(),tabToStatistic={gradeCount:new GradeCountStatistic("statisticsGradeDiv"),gradeDistribution:new GradeDistributionStatistic("statisticsGradeDistributionDiv"),submissionsVerdict:new SubmissionsVerdictStatistic("submissionsVerdictDiv"),lateSubmissionsVerdict:new LateSubmissionsVerdictStatistic("lateSubmissionsVerdictDiv"),bestSubmissionsVerdict:new BestSubmissionsVerdictStatistic("bestSubmissionsVerdictDiv")};$(function(){$('a[data-toggle="tab"]').on("shown.bs.tab",function(t){const e=tabToStatistic[t.target.getAttribute("aria-controls")];e&&e.plotAsync()}),$('.active > a[data-toggle="tab"]').trigger("shown.bs.tab")});